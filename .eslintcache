[{"/mnt/c/Users/jason/Documents/projects/todo/src/index.js":"1","/mnt/c/Users/jason/Documents/projects/todo/src/reportWebVitals.js":"2","/mnt/c/Users/jason/Documents/projects/todo/src/App.js":"3","/mnt/c/Users/jason/Documents/projects/todo/src/Todo.js":"4","/mnt/c/Users/jason/Documents/projects/todo/src/jsonfile.js":"5"},{"size":500,"mtime":1612131932792,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1612131932795,"results":"8","hashOfConfig":"7"},{"size":1870,"mtime":1612149035117,"results":"9","hashOfConfig":"7"},{"size":1099,"mtime":1612131932790,"results":"10","hashOfConfig":"7"},{"size":46,"mtime":1612145368749,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ndvg5x",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/jason/Documents/projects/todo/src/index.js",[],["24","25"],"/mnt/c/Users/jason/Documents/projects/todo/src/reportWebVitals.js",[],"/mnt/c/Users/jason/Documents/projects/todo/src/App.js",["26","27"],"import './App.css';\nimport Todo from './Todo.js'\nimport jsonf from './jsonfile'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n\nvar add = 0;\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      data: jsonf\n    };\n    this.vetooveride = this.vetooveride.bind(this);//bind to App to change state\n    this.hc = this.hc.bind(this);\n    this.add = this.add.bind(this);\n  }\n  hc(id) {\n    this.setState(prevState => {\n      const newtodo = prevState.data.map((current) => {\n        if (current.id === id) {\n          return { ...current, completed: !current.completed }  //return all of current, but changed the completed object of it\n        }\n        return current;\n      })\n      return {\n        data: newtodo\n      }\n    })\n  }\n  vetooveride(id) {\n    for (var a=add;a>0;a--){\n      jsonf.splice(id,a)\n    }\n    add = 0;\n    this.setState(   //hardcoded setstate in\n      {\n        data: []\n      }\n      /*\n      this.setState(prevState=>{   //change state by using previous state\n        return{\n          count=prevState+1\n        }\n      }*/\n\n    )\n\n  }\n  add() {\n    var temp = prompt(\"Thing to do?\");\n    console.log(temp)\n    if (temp!=null && temp != \"\" ) {\n      add = add += 1;\n      jsonf.push(\n        {\n          id: add,\n          name: temp,\n          completed: false\n        }\n      );\n      this.setState(   //hardcoded setstate in\n        {\n          data: jsonf\n        })\n    }\n  }\n  render() {\n    const newarray = this.state.data.map((temp) => <Todo key={temp.id} keys={temp.id} name={temp.name}\n      hc={this.hc} completed={temp.completed} />)\n    return (\n      <div className=\"App\">{newarray}\n        <button onClick={this.add}>Add</button>\n        <br></br>\n        <button onClick={this.vetooveride}>Reset</button>\n\n      </div>  /*can use array as data */\n    );\n  }\n}\nexport default App;\n","/mnt/c/Users/jason/Documents/projects/todo/src/Todo.js",[],"/mnt/c/Users/jason/Documents/projects/todo/src/jsonfile.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":5,"column":8,"nodeType":"34","messageId":"35","endLine":5,"endColumn":16},{"ruleId":"36","severity":1,"message":"37","line":54,"column":28,"nodeType":"38","messageId":"39","endLine":54,"endColumn":30},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]